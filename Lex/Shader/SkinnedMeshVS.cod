//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 worldViewProjection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 lightColor;                 // Offset:  128 Size:    16 [unused]
//   float4 lightDir;                   // Offset:  144 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// BONES                    0   xyzw        3     NONE    uint       
// WEIGHTS                  0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xy          3     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             0         7  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c8, 0, 1, 0, 0
    dcl_texcoord v0  // vin<0,1,2,3>
    dcl_texcoord1 v1  // vin<4,5,6,7>
    dcl_texcoord2 v2  // vin<8,9>

#line 36 "D:\学校関連\VS_Projects\FBXLex\Lex\Lex\Shader\SkinnedMeshVS.hlsl"
    mul r0, v1.x, c5
    mul r1, v1.y, c6
    add r0, r0, r1
    mul r1, v1.z, c7
    add r0, r0, r1
    add r0, r0, c8.x
    dp4 r1.x, r0, r0
    rsq r1.x, r1.x
    mul r0, r0, r1.x  // ::nNorm<0,1,2,3>

#line 40
    mul r1, v0.x, c1
    mul r2, v0.y, c2
    add r1, r1, r2
    mul r2, v0.z, c3
    add r1, r1, r2
    mul r2, v0.w, c4
    add r1, r1, r2  // ::vout<0,1,2,3>

#line 47
    mov r0, r0  // ::vout<8,9,10,11>
    mov r2.xy, v2  // ::vout<12,13>

#line 54
    mov oT1, r0  // ::main<8,9,10,11>
    mov r1.xy, r1  // ::main<0,1>
    mov r1.zw, r1  // ::main<2,3>
    mov oT2.xy, r2  // ::main<12,13>

#line 33
    mul r0.xy, r1.w, c0
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r1  // ::main<2,3>
    mov oT0, c8.y  // ::main<4,5,6,7>

// approximately 26 instruction slots used
vs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- vin.pos.x; v0.y <- vin.pos.y; v0.z <- vin.pos.z; v0.w <- vin.pos.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   v2.x <- vin.texCoord.x; v2.y <- vin.texCoord.y; 
//   v3.x <- vin.bones.x; v3.y <- vin.bones.y; v3.z <- vin.bones.z; v3.w <- vin.bones.w; 
//   v4.x <- vin.weights.x; v4.y <- vin.weights.y; v4.z <- vin.weights.z; v4.w <- vin.weights.w; 
//   o3.x <- <main return value>.texCoord.x; o3.y <- <main return value>.texCoord.y; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; o2.w <- <main return value>.normal.w; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.pos.x; o0.y <- <main return value>.pos.y; o0.z <- <main return value>.pos.z; o0.w <- <main return value>.pos.w
//
#line 35 "D:\学校関連\VS_Projects\FBXLex\Lex\Lex\Shader\SkinnedMeshVS.hlsl"
itof r0.x, l(0)  // r0.x <- vin.normal.w

#line 36
mul r1.xyzw, v1.xxxx, cb0[4].xyzw
mul r2.xyzw, v1.yyyy, cb0[5].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v1.zzzz, cb0[6].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.xxxx, cb0[7].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
dp4 r1.x, r0.xyzw, r0.xyzw
rsq r1.x, r1.x
mul r0.xyzw, r0.xyzw, r1.xxxx  // r0.x <- nNorm.x; r0.y <- nNorm.y; r0.z <- nNorm.z; r0.w <- nNorm.w

#line 40
mul r1.xyzw, v0.xxxx, cb0[0].xyzw
mul r2.xyzw, v0.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v0.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v0.wwww, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- vout.pos.x; r1.y <- vout.pos.y; r1.z <- vout.pos.z; r1.w <- vout.pos.w

#line 47
mov r0.xyzw, r0.xyzw  // r0.x <- vout.normal.x; r0.y <- vout.normal.y; r0.z <- vout.normal.z; r0.w <- vout.normal.w

#line 49
mov r2.xy, v2.xyxx  // r2.x <- vout.texCoord.x; r2.y <- vout.texCoord.y

#line 52
mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z; r3.w <- vout.color.w

#line 54
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r3.xyzw
mov o2.xyzw, r0.xyzw
mov o3.xy, r2.xyxx
ret 
// Approximately 26 instruction slots used
