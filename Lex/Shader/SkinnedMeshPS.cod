//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 worldViewProjection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 lightColor;                 // Offset:  128 Size:    16 [unused]
//   float4 lightDir;                   // Offset:  144 Size:    16
//
// }
//
// cbuffer MATERIAL_CONSTANT_BUFFER
// {
//
//   float4 ambient;                    // Offset:    0 Size:    16 [unused]
//   float4 bump;                       // Offset:   16 Size:    16 [unused]
//   float4 diffuse;                    // Offset:   32 Size:    16
//   float4 emissive;                   // Offset:   48 Size:    16 [unused]
//   float4 specular;                   // Offset:   64 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseSampler                    sampler      NA          NA             s0      1 
// diffuseMap                        texture  float4          2d             t0      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
// MATERIAL_CONSTANT_BUFFER          cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TEXCOORD                 1   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c1         cb1             2         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c2, 0, 0.318309873, 0, 0
    dcl t0  // pin<4,5,6,7>
    dcl t1  // pin<8,9,10,11>
    dcl t2.xy  // pin<12,13>
    dcl_2d s0

#line 17 "D:\学校関連\VS_Projects\FBXLex\Lex\Lex\Shader\SkinnedMeshPS.hlsl"
    texld r0, t2, s0  // ::diffuseColor<0,1,2,3>
    nop
    mul r1.xyz, r0, c1  // NormalizedLambert::diffuse<0,1,2>
    mov r2.xyz, t1  // NormalizedLambert::normal<0,1,2>
    mov r3.xyz, c0  // NormalizedLambert::lightDir<0,1,2>

#line 9
    dp3 r1.w, r2, r3
    mov r2.x, -r1.w
    add r2.x, r2.x, c2.x
    cmp r1.w, r2.x, c2.x, r1.w
    mul r1.xyz, r1.w, r1
    mul r0.xyz, r1, c2.y  // ::NormalizedLambert<0,1,2>

#line 18
    mov r0.xyz, r0  // ::color<0,1,2>

#line 21
    mov r0.xyz, r0  // ::output<0,1,2>
    mov r0.w, r0.w  // ::output<3>
    mul r0, r0, t0  // ::main<0,1,2,3>

#line 15
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 15 instruction slots used (1 texture, 14 arithmetic)
ps_4_0
dcl_constantbuffer CB0[10], immediateIndexed
dcl_constantbuffer CB1[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- pin.pos.x; v0.y <- pin.pos.y; v0.z <- pin.pos.z; v0.w <- pin.pos.w; 
//   v1.x <- pin.color.x; v1.y <- pin.color.y; v1.z <- pin.color.z; v1.w <- pin.color.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.texCoord.x; v3.y <- pin.texCoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 17 "D:\学校関連\VS_Projects\FBXLex\Lex\Lex\Shader\SkinnedMeshPS.hlsl"
sample r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z; r0.w <- diffuseColor.w

#line 18
nop 
mul r1.xyz, r0.xyzx, cb1[2].xyzx
mov r2.xyz, v2.xyzx
mov r3.xyz, cb0[9].xyzx

#line 9
dp3 r1.w, r2.xyzx, r3.xyzx
max r1.w, r1.w, l(0.000000)
mul r1.xyz, r1.wwww, r1.xyzx
mul r0.xyz, r1.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)  // r0.x <- <NormalizedLambert return value>.x; r0.y <- <NormalizedLambert return value>.y; r0.z <- <NormalizedLambert return value>.z

#line 18
mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 21
mov r0.xyz, r0.xyzx  // r0.x <- output.x; r0.y <- output.y; r0.z <- output.z

#line 22
mov r0.w, r0.w  // r0.w <- output.w

#line 24
mul o0.xyzw, r0.xyzw, v1.xyzw
ret 
// Approximately 14 instruction slots used
